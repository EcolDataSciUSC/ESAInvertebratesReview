sim_env_mat <- array(data = NA,
dim = c(grid_size,
grid_size,
time_step))
return(sim_env_mat)
}
dim(test)
test <- sim_env
dim(test)
test
test <- sim_env()
dim(test)
test
dim(test)
devtools::install_github("RangeShifter/RangeShiftR-package", ref="main")
library(RangeShiftR)
?RangeShiftR::Simulation
?RangeShiftR::Genetics
test_sim <- Simulation(Simulation = 2, Years = 50, Replicates = 2, OutIntPop = 50)
str(test_sim)
?Landscape
?ArtificialLandscape
init_propSuitableHab = 0.5
my_terrain <- RangeShiftR::ArtificialLandscape(propSuit = init_propSuitableHab,
K_or_DensDep = 10,
Resolution = 100*1000,
dimX = 10, dimY = 10,
fractal = FALSE,
continuous = TRUE,
minPct = 0, maxPct = 1)
my_terrain <- RangeShiftR::ArtificialLandscape(propSuit = init_propSuitableHab,
K_or_DensDep = 10,
Resolution = 100*1000,
dimX = 10, dimY = 10,
fractal = FALSE,
continuous = TRUE,
minPct = 0.001, maxPct = 0.99)
my_terrain
plot(my_terrain)
str(my_terrain)
?Demography
?Dispersal
?Emigration
?DispersalKernel
?Settlement
?Genetics
?Initialise
my_terrain <- RangeShiftR::ArtificialLandscape(propSuit = init_propSuitableHab,
K_or_DensDep = 10,
Resolution = 100*1000,
dimX = 10, dimY = 10,
fractal = FALSE,
continuous = TRUE,
minPct = 0.001, maxPct = 0.99)
my_demography <- RangeShiftR::Demography(Rmax = 300,
bc = 1,
StageStruct = FALSE,
ReproductionType = 1,
PropMales = 0.6)
my_dispersal <- RangeShiftR::Dispersal(Emigration = Emigration(EmigProb = 0.2),
Transfer = DispersalKernel(IndVar = TRUE),
Settlement = Settlement(FindMate = TRUE, IndVar = TRUE))
rstudioapi::addTheme("https://raw.githubusercontent.com/davidgibsonp/ayu-rstudio/master/rstheme/ayu-mirage.rstheme",
apply = TRUE, force = TRUE)
install.packages("Rccp")
# This script visualizes various aspects of the ESA as it applies to
# invertebrate species.
# Load libraries
library(colorspace)
library(cowplot)
library(data.table)
library(ggnewscale)
library(googlesheets4)
library(taxizedb)
library(tidyverse)
#### FIGURE ONE ####
esa_dat <- fread("../data/summary_data.csv", header = TRUE, stringsAsFactors = FALSE) %>%
dplyr::mutate(itisGenus = word(ScientificName, start = 1))
setwd("G:/My Drive/000_OtherResearch/2023_08_01_ESAInvertebrates/scripts")
# This script visualizes various aspects of the ESA as it applies to
# invertebrate species.
# Load libraries
library(colorspace)
library(cowplot)
library(data.table)
library(ggnewscale)
library(googlesheets4)
library(taxizedb)
library(tidyverse)
#### FIGURE ONE ####
esa_dat <- fread("../data/summary_data.csv", header = TRUE, stringsAsFactors = FALSE) %>%
dplyr::mutate(itisGenus = word(ScientificName, start = 1))
# Retrieve parent taxonomy from ITIS (note - need to clean up, especially at the subspecies
# level where ITIS doesn't have many names).
# taxizedb::db_download_itis()
# src_itis <- taxizedb::src_itis()
#
# my_tax_ids <- taxizedb::name2taxid(esa_dat$ScientificName, db = "itis", out_type = "summary")
# parent_tax <- taxizedb::classification(my_tax_ids$id, db = "itis")
parent_tax <- readRDS("../data/parent_tax.rds")
# This script visualizes various aspects of the ESA as it applies to
# invertebrate species.
# Load libraries
library(colorspace)
library(cowplot)
library(data.table)
library(ggnewscale)
library(googlesheets4)
library(taxizedb)
library(tidyverse)
#### FIGURE ONE ####
esa_dat <- fread("../data/summary_data.csv", header = TRUE, stringsAsFactors = FALSE) %>%
dplyr::mutate(itisGenus = word(ScientificName, start = 1))
# Retrieve parent taxonomy from ITIS (note - need to clean up, especially at the subspecies
# level where ITIS doesn't have many names).
# taxizedb::db_download_itis()
# src_itis <- taxizedb::src_itis()
#
# my_tax_ids <- taxizedb::name2taxid(esa_dat$ScientificName, db = "itis", out_type = "summary")
# parent_tax <- taxizedb::classification(my_tax_ids$id, db = "itis")
parent_tax <- readRDS("../data/parent_taxonomy.rds")
phylum_tax <- do.call(rbind, (lapply(parent_tax, function(x) x[1,])))
# This script visualizes various aspects of the ESA as it applies to
# invertebrate species.
# Load libraries
library(colorspace)
library(cowplot)
library(data.table)
library(ggnewscale)
library(googlesheets4)
library(taxizedb)
library(tidyverse)
#### FIGURE ONE ####
esa_dat <- fread("../data/summary_data.csv", header = TRUE, stringsAsFactors = FALSE) %>%
dplyr::mutate(itisGenus = word(ScientificName, start = 1))
# Retrieve parent taxonomy from ITIS (note - need to clean up, especially at the subspecies
# level where ITIS doesn't have many names).
taxizedb::db_download_itis()
src_itis <- taxizedb::src_itis()
#
my_tax_ids <- taxizedb::name2taxid(esa_dat$ScientificName, db = "itis", out_type = "summary")
# parent_tax <- taxizedb::classification(my_tax_ids$id, db = "itis")
parent_tax <- readRDS("../data/parent_taxonomy.rds")
phylum_tax <- do.call(rbind, (lapply(parent_tax, function(x) x[1,])))
head(phylum_tax)
head(my_tax_ids)
parent_tax <- readRDS("../data/parent_taxonomy.rds")
phylum_tax <- do.call(rbind, (lapply(parent_tax, function(x) x[1,]))) %>%
dplyr::mutate(tax_id = rownames(.))
head(my_tax_ids)
head(phylum_tax)
parent_tax <- readRDS("../data/parent_taxonomy.rds")
phylum_tax <- do.call(rbind, (lapply(parent_tax, function(x) x[1,]))) %>%
dplyr::mutate(tax_id = rownames(.)) %>%
dplyr::left_join(my_tax_ids, by = c("tax_id" = "id"))
parent_tax <- readRDS("../data/parent_taxonomy.rds")
phylum_tax <- do.call(rbind, (lapply(parent_tax, function(x) x[1,]))) %>%
dplyr::mutate(tax_id = as.numeric(rownames(.))) %>%
dplyr::left_join(my_tax_ids, by = c("tax_id" = "id"))
head(phylum_tax)
colnames(phylum_tax) <- c("kingdom", "rank", "kingdom_id", "id", "scientificName")
head(phylum_tax)
phylum_tax <- left_join(esa_dat, by = c("scientificName" = "ScientificName"))
phylum_tax <- phylum_dat %>%
left_join(esa_dat, by = c("scientificName" = "ScientificName"))
phylum_tax <- phylum_tax %>%
left_join(esa_dat, by = c("scientificName" = "ScientificName"))
head(phylum_tax)
parent_tax <- readRDS("../data/parent_taxonomy.rds")
phylum_tax <- do.call(rbind, (lapply(parent_tax, function(x) x[1,]))) %>%
dplyr::mutate(tax_id = as.numeric(rownames(.))) %>%
dplyr::left_join(my_tax_ids, by = c("tax_id" = "id"))
colnames(phylum_tax) <- c("kingdom", "rank", "kingdom_id", "id", "scientificName")
phylum_tax <- phylum_tax %>%
left_join(esa_dat, by = c("scientificName" = "ScientificName")) %>%
dplyr::filter(kingdom == "Animalia")
head(phylum_tax)
parent_tax <- readRDS("../data/parent_taxonomy.rds")
kingdom_tax <- do.call(rbind, (lapply(parent_tax, function(x) x[1,]))) %>%
dplyr::mutate(tax_id = as.numeric(rownames(.))) %>%
dplyr::left_join(my_tax_ids, by = c("tax_id" = "id"))
colnames(kingdom_tax) <- c("kingdom", "rank", "kingdom_id", "id", "scientificName")
kingdom_tax <- kingdom_tax %>%
left_join(esa_dat, by = c("scientificName" = "ScientificName")) %>%
dplyr::filter(kingdom == "Animalia")
phylum_tax <- do.call(rbind, (lapply(parent_tax, function(x) x[4,])))
phylum_tax
phylum_tax <- do.call(rbind, (lapply(parent_tax, function(x) x[4,]))) %>%
dplyr::filter(rank == "phylum")
phylum_tax
table(phylum_tax$name)
chordata_phylum_tax <- do.call(rbind, (lapply(parent_tax, function(x) x[4,]))) %>%
dplyr::filter(rank == "phylum") %>%
dplyr::mutate(tax_id = as.numeric(rownames(.)))
`%!in%` <- negate(`%in%`)
invert_dat <- kingdom_tax %>%
dplyr::filter(id %!in% chordata_phylum_tax$tax_id)
head(invert_dat)
invert_dat <- kingdom_tax %>%
dplyr::filter(id %!in% chordata_phylum_tax$tax_id)
vert_dat <- kingdom_tax %>%
dplyr::filter(id %in% chordata_phylum_tax$tax_id)
head(vert_dat)
invert_dat
head(invert_dat)
invert_dat <- invert_dat %>%
dplyr::mutate(across(ends_with("Dates"), as.Date()))
invert_dat <- invert_dat %>%
dplyr::mutate(across(ends_with("Dates"), ~as.Date(.x)))
?as.Date
invert_dat <- invert_dat %>%
dplyr::mutate(wasListed = ifelse(!is.na(ListingDates), 1, 0),
hasRecoveryPlan = ifelse(!is.na(RecoveryPlanDates), 1, 0),
hasReview = ifelse(!is.na(ReviewDates), 1, 0))
sum(invert_dat$wasListed)
# This script visualizes various aspects of the ESA as it applies to
# invertebrate species.
# Load libraries
library(colorspace)
library(cowplot)
library(data.table)
library(ggnewscale)
library(googlesheets4)
library(taxizedb)
library(tidyverse)
`%!in%` <- negate(`%in%`)
#### FIGURE ONE ####
esa_dat <- fread("../data/summary_data.csv", header = TRUE, stringsAsFactors = FALSE) %>%
dplyr::mutate(itisGenus = word(ScientificName, start = 1))
# Retrieve parent taxonomy from ITIS (note - need to clean up, especially at the subspecies
# level where ITIS doesn't have many names).
taxizedb::db_download_itis()
src_itis <- taxizedb::src_itis()
#
my_tax_ids <- taxizedb::name2taxid(esa_dat$ScientificName, db = "itis", out_type = "summary")
# parent_tax <- taxizedb::classification(my_tax_ids$id, db = "itis")
parent_tax <- readRDS("../data/parent_taxonomy.rds")
kingdom_tax <- do.call(rbind, (lapply(parent_tax, function(x) x[1,]))) %>%
dplyr::mutate(tax_id = as.numeric(rownames(.))) %>%
dplyr::left_join(my_tax_ids, by = c("tax_id" = "id"))
colnames(kingdom_tax) <- c("kingdom", "rank", "kingdom_id", "id", "scientificName")
kingdom_tax <- kingdom_tax %>%
left_join(esa_dat, by = c("scientificName" = "ScientificName")) %>%
dplyr::filter(kingdom == "Animalia")
chordata_phylum_tax <- do.call(rbind, (lapply(parent_tax, function(x) x[4,]))) %>%
dplyr::filter(rank == "phylum") %>%
dplyr::mutate(tax_id = as.numeric(rownames(.)))
# Filter the data into two groups (vertebrates and invertebrates)
invert_dat <- kingdom_tax %>%
dplyr::filter(id %!in% chordata_phylum_tax$tax_id)
vert_dat <- kingdom_tax %>%
dplyr::filter(id %in% chordata_phylum_tax$tax_id)
# Create counts of each category
invert_dat <- invert_dat %>%
dplyr::mutate(wasListed = ifelse(!is.na(ListingDates) & ListingDates != "" & ListingDates != " ", 1, 0),
hasRecoveryPlan = ifelse(!is.na(RecoveryPlanDates), 1, 0),
hasReview = ifelse(!is.na(ReviewDates), 1, 0))
# Create a Sankey diagram illustrating the flow of species through the ESA process for
# both groups.
# Load in data from Google Sheets
esa_dat <- googlesheets4::read_sheet("https://docs.google.com/spreadsheets/d/1fqlEDYKHpSC3SaTWNCm9qNUnvr7-oFVBrWEJyu1_yJE/edit?usp=sharing")
sum(invert_dat$wasListed)
invert_dat <- kingdom_tax %>%
dplyr::filter(id %!in% chordata_phylum_tax$tax_id)
vert_dat <- kingdom_tax %>%
dplyr::filter(id %in% chordata_phylum_tax$tax_id)
# Create counts of each category
invert_dat <- invert_dat %>%
dplyr::mutate(wasListed = ifelse(!is.na(ListingDates) & ListingDates != "" & ListingDates != " ", 1, 0),
hasRecoveryPlan = ifelse(!is.na(RecoveryPlanDates) & RecoveryPlanDates != "" & RecoveryPlanDates != " ", 1, 0),
hasReview = ifelse(!is.na(ReviewDates), 1, 0))
sum(invert_dat$hasRecoveryPlan)
sum(invert_dat$hasReview)
invert_dat <- kingdom_tax %>%
dplyr::filter(id %!in% chordata_phylum_tax$tax_id)
vert_dat <- kingdom_tax %>%
dplyr::filter(id %in% chordata_phylum_tax$tax_id)
# Create counts of each category
invert_dat <- invert_dat %>%
dplyr::mutate(wasListed = ifelse(!is.na(ListingDates) & ListingDates != "" & ListingDates != " ", 1, 0),
hasRecoveryPlan = ifelse(!is.na(RecoveryPlanDates) & RecoveryPlanDates != "" & RecoveryPlanDates != " ", 1, 0),
hasReview = ifelse(!is.na(ReviewDates) & ReviewDates != "" & ReviewDates != " ", 1, 0))
sum(invert_dat$hasReview)
table(invert_dat$ListingStatus)
sum(dplyr::filter(invert_dat, ListingStatus == "Endangered")$hasReview)
sum(dplyr::filter(invert_dat, ListingStatus == "Threatened")$hasReview)
install.packages("ggsankey")
invert_dat <- kingdom_tax %>%
dplyr::filter(id %!in% chordata_phylum_tax$tax_id) %>%
dplyr::mutate(higherTax = "Invertebrate")
vert_dat <- kingdom_tax %>%
dplyr::filter(id %in% chordata_phylum_tax$tax_id) %>%
dplyr::mutate(higherTax = "Vertebrate")
sankey_dat <- rbind(invert_dat, vert_dat)
table(sankey_dat$higherTax)
names(sankey_dat)
sankey_dat <- rbind(invert_dat, vert_dat) %>%
dplyr::mutate(hasReview = ifelse(ReviewDates != "" & ReviewDates != " ", TRUE, FALSE),
hasPlan = ifelse(RecoveryPlanDates != "" & RecoveryPlanDates != " ", TRUE, FALSE)) %>%
dplyr::group_by(higherTax, ListingStatus, hasReview, hasPlan) %>%
dplyr::mutate(n = n()) %>%
dplyr::ungroup() %>%
dplyr::select(higherTax, ListingStatus, hasReview, hasPlan, n) %>% unique()
head(sankey_dat)
sankey_dat <- rbind(invert_dat, vert_dat) %>%
dplyr::mutate(hasReview = ifelse(ReviewDates != "" & ReviewDates != " ", TRUE, FALSE),
hasPlan = ifelse(RecoveryPlanDates != "" & RecoveryPlanDates != " ", TRUE, FALSE)) %>%
dplyr::group_by(higherTax, ListingStatus, hasReview, hasPlan) %>%
dplyr::mutate(n = n()) %>%
dplyr::ungroup() %>%
dplyr::select(higherTax, ListingStatus, hasReview, hasPlan, n) %>% unique() %>%
dplyr::mutate(ListingStatus = ifelse(ListingStatus == "", "Not Listed", ListingStatus))
head(sankey_dat)
install.packages("ggalluvial")
ggplot()+
ggalluvial::geom_alluvium(sankey_dat,
mapping = aes(y = n, axis1 = ListingStatus,
axis2 = hasPlan, axis3 = hasReview,
color = higherTax))
ggplot(sankey_dat,
mapping = aes(y = n, axis1 = ListingStatus,
axis2 = hasPlan, axis3 = hasReview))+
ggalluvial::geom_alluvium(mapping = aes(fill = higherTax))
ggplot(sankey_dat,
mapping = aes(y = n, axis1 = ListingStatus,
axis2 = hasPlan, axis3 = hasReview))+
ggalluvial::geom_flow(mapping = aes(fill = higherTax))
ggplot(sankey_dat,
mapping = aes(y = n, axis1 = ListingStatus,
axis2 = hasPlan, axis3 = hasReview))+
ggalluvial::geom_flow(mapping = aes(fill = higherTax))+
geom_stratum(alpha = .25, width = 1/8, reverse = FALSE)
ggplot(sankey_dat,
mapping = aes(y = n, axis1 = ListingStatus,
axis2 = hasPlan, axis3 = hasReview))+
ggalluvial::geom_flow(mapping = aes(fill = higherTax))+
ggalluvial::geom_stratum(alpha = .25, width = 1/8, reverse = FALSE)
ggplot(sankey_dat,
mapping = aes(y = n, axis1 = ListingStatus,
axis2 = hasPlan, axis3 = hasReview))+
ggalluvial::geom_flow(mapping = aes(fill = higherTax))+
ggalluvial::geom_stratum(alpha = .25, width = 1/8, reverse = FALSE)+
geom_text(stat = "stratum", aes(label = after_stat(stratum)),
reverse = FALSE)
library(ggalluvial)
ggplot(sankey_dat,
mapping = aes(y = n, axis1 = ListingStatus,
axis2 = hasPlan, axis3 = hasReview))+
ggalluvial::geom_flow(mapping = aes(fill = higherTax))+
ggalluvial::geom_stratum(alpha = .25, width = 1/8, reverse = FALSE)+
geom_text(stat = "stratum", aes(label = after_stat(stratum)),
reverse = FALSE)
table(invert_dat$ListingStatus)
sum(dplyr::filter(invert_dat, ListingStatus == "Endangered")$hasReview)
invert_dat <- kingdom_tax %>%
dplyr::filter(id %!in% chordata_phylum_tax$tax_id) %>%
dplyr::mutate(higherTax = "Invertebrate")
sum(dplyr::filter(invert_dat, ListingStatus == "Endangered")$hasReview)
head(invert_dat)
names(invert_dat)
invert_dat <- kingdom_tax %>%
dplyr::filter(id %!in% chordata_phylum_tax$tax_id) %>%
dplyr::mutate(higherTax = "Invertebrate") %>%
dplyr::mutate(hasReview = ifelse(ReviewDates != "" & ReviewDates != " ", TRUE, FALSE),
hasPlan = ifelse(RecoveryPlanDates != "" & RecoveryPlanDates != " ", TRUE, FALSE)) %>%
dplyr::group_by(ListingStatus, hasReview, hasPlan) %>%
dplyr::mutate(n = n()) %>%
dplyr::ungroup() %>%
dplyr::select(higherTax, ListingStatus, hasReview, hasPlan, n) %>% unique() %>%
dplyr::mutate(ListingStatus = ifelse(ListingStatus == "", "Not Listed", ListingStatus))
invert_dat
invert_dat
invert_dat
invert_sankey <- fread("../data/invert_sankey.csv")
nodes <- data.frame(
name=c(as.character(invert_sankey$source),
as.character(invert_sankey$target)) %>% unique()
)
nodes
invert_sankey$IDsource <- match(invert_sankey$source, nodes$name)-1
invert_sankey$IDtarget <- match(invert_sankey$target, nodes$name)-1
install.packages("networkD3")
library(networkD3)
p <- sankeyNetwork(Links = invert_sankey, Nodes = nodes,
Source = "IDsource", Target = "IDtarget",
Value = "value", NodeID = "name",
sinksRight=FALSE)
p
?sankeyNetwork
devtools::install_github("davidsjoberg/ggsankey")
names(invert_sankey)
names(invert_dat)
invert_sankey <- invert_dat %>%
ggsankey::make_long(ListingStatus, hasReview, hasPlan)
head(invert_sankey)
invert_dat <- kingdom_tax %>%
dplyr::filter(id %!in% chordata_phylum_tax$tax_id) %>%
dplyr::mutate(higherTax = "Invertebrate") %>%
dplyr::mutate(hasReview = ifelse(ReviewDates != "" & ReviewDates != " ", TRUE, FALSE),
hasPlan = ifelse(RecoveryPlanDates != "" & RecoveryPlanDates != " ", TRUE, FALSE)) %>%
dplyr::mutate(ListingStatus = ifelse(ListingStatus == "", "Not Listed", ListingStatus))
invert_sankey <- invert_dat %>%
ggsankey::make_long(ListingStatus, hasReview, hasPlan)
ggplot(invert_sankey, aes(x = x,
next_x = next_x,
node = node,
next_node = next_node,
fill = factor(node))) +
geom_sankey() +
theme_sankey(base_size = 16)
ggplot(invert_sankey, aes(x = x,
next_x = next_x,
node = node,
next_node = next_node,
fill = factor(node))) +
ggsankey::geom_sankey() +
ggsankey::theme_sankey(base_size = 16)
ggplot(invert_sankey, aes(x = x,
next_x = next_x,
node = node,
next_node = next_node,
fill = factor(node))) +
ggsankey::geom_sankey() +
ggsankey::geom_sankey_label() +
ggsankey::theme_sankey(base_size = 16)
ggplot(invert_sankey, aes(x = x,
next_x = next_x,
node = node,
next_node = next_node,
fill = factor(node),
label = node)) +
ggsankey::geom_sankey() +
ggsankey::geom_sankey_label() +
ggsankey::theme_sankey(base_size = 16)
# Filter the data into two groups (vertebrates and invertebrates)
invert_dat <- kingdom_tax %>%
dplyr::filter(id %!in% chordata_phylum_tax$tax_id) %>%
dplyr::mutate(higherTax = "Invertebrate") %>%
dplyr::mutate(hasReview = ifelse(ReviewDates != "" & ReviewDates != " ", TRUE, FALSE),
hasPlan = ifelse(RecoveryPlanDates != "" & RecoveryPlanDates != " ", TRUE, FALSE)) %>%
dplyr::mutate(ListingStatus = ifelse(ListingStatus == "", "Not Listed", ListingStatus)) %>%
dplyr::filter(ListingStatus != "Not Listed")
vert_dat <- kingdom_tax %>%
dplyr::filter(id %in% chordata_phylum_tax$tax_id) %>%
dplyr::mutate(higherTax = "Vertebrate")
# Create a Sankey diagram illustrating the flow of species through the ESA process for
# both groups.
invert_sankey <- invert_dat %>%
ggsankey::make_long(ListingStatus, hasReview, hasPlan)
ggplot(invert_sankey, aes(x = x,
next_x = next_x,
node = node,
next_node = next_node,
fill = factor(node),
label = node)) +
ggsankey::geom_sankey() +
ggsankey::geom_sankey_label() +
ggsankey::theme_sankey(base_size = 16)
names(kingdom_tax)
invert_dat <- kingdom_tax %>%
dplyr::filter(id %!in% chordata_phylum_tax$tax_id) %>%
dplyr::mutate(higherTax = "Invertebrate") %>%
dplyr::mutate(hasReview = ifelse(ReviewDates != "" & ReviewDates != " ", TRUE, FALSE),
hasPlan = ifelse(RecoveryPlanDates != "" & RecoveryPlanDates != " ", TRUE, FALSE),
hasSSA = ifelse(SpeciesStatusAssessmentDates != "" & SpeciesStatusAssessmentDates != " ", TRUE, FALSE)) %>%
dplyr::mutate(ListingStatus = ifelse(ListingStatus == "", "Not Listed", ListingStatus)) %>%
dplyr::filter(ListingStatus != "Not Listed")
vert_dat <- kingdom_tax %>%
dplyr::filter(id %in% chordata_phylum_tax$tax_id) %>%
dplyr::mutate(higherTax = "Vertebrate")
invert_sankey <- invert_dat %>%
ggsankey::make_long(ListingStatus, hasPlan, hasSSA, hasReview)
ggplot(invert_sankey, aes(x = x,
next_x = next_x,
node = node,
next_node = next_node,
fill = factor(node),
label = node)) +
ggsankey::geom_sankey() +
ggsankey::geom_sankey_label() +
ggsankey::theme_sankey(base_size = 16)
invert_sankey <- invert_dat %>%
ggsankey::make_long(ListingStatus, hasPlan, hasReview, hasSSA)
ggplot(invert_sankey, aes(x = x,
next_x = next_x,
node = node,
next_node = next_node,
fill = factor(node),
label = node)) +
ggsankey::geom_sankey() +
ggsankey::geom_sankey_label() +
ggsankey::theme_sankey(base_size = 16)
names(kingdom_tax)
vert_dat <- kingdom_tax %>%
dplyr::filter(id %in% chordata_phylum_tax$tax_id) %>%
dplyr::mutate(higherTax = "Vertebrate") %>%
dplyr::mutate(hasReview = ifelse(ReviewDates != "" & ReviewDates != " ", TRUE, FALSE),
hasPlan = ifelse(RecoveryPlanDates != "" & RecoveryPlanDates != " ", TRUE, FALSE),
hasSSA = ifelse(SpeciesStatusAssessmentDates != "" & SpeciesStatusAssessmentDates != " ", TRUE, FALSE)) %>%
dplyr::mutate(ListingStatus = ifelse(ListingStatus == "", "Not Listed", ListingStatus)) %>%
dplyr::filter(ListingStatus != "Not Listed")
vert_sankey <- vert_dat %>%
ggsankey::make_long(ListingStatus, hasPlan, hasReview, hasSSA)
ggplot(vert_sankey, aes(x = x,
next_x = next_x,
node = node,
next_node = next_node,
fill = factor(node),
label = node)) +
ggsankey::geom_sankey() +
ggsankey::geom_sankey_label() +
ggsankey::theme_sankey(base_size = 16)
